// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  Pet           Pet[]
  Schedule      Schedule[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id            String        @id @default(uuid()) @map("id")
  name          String
  description   String
  price         Decimal
  type          String
  image         String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  orderProducts OderProduct[]
}

model Order {
  id            String        @id @default(cuid())
  total         Decimal
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  createdAt     DateTime      @default(now())
  orderProducts OderProduct[]
}

model OderProduct {
  id        String  @id @default(cuid())
  quantity  Int
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Pet {
  id           String     @id @default(uuid()) @map("id")
  name         String
  age          Int
  race         String
  gender       String
  observations String
  image        String
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Schedule     Schedule[]
}

model AvailableDate {
  id             String     @id @default(cuid())
  date           DateTime
  availableTimes Time[]
  Schedule       Schedule[]
}

model Time {
  id              String        @id @default(cuid())
  timeSlot        String
  availableDateId String
  reserved        Boolean       @default(false)
  availableDate   AvailableDate @relation(fields: [availableDateId], references: [id], onDelete: Cascade)
  Schedule        Schedule[]
}

model Service {
  id          String     @id @default(cuid())
  name        String
  price       Decimal
  description String
  image       String
  Schedule    Schedule[]
}

model Schedule {
  id              String        @id @default(cuid())
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  availableDateId String
  availableDate   AvailableDate @relation(fields: [availableDateId], references: [id], onDelete: Cascade)
  timeSlotId      String
  timeSlot        Time          @relation(fields: [timeSlotId], references: [id])
  petId           String
  pet             Pet           @relation(fields: [petId], references: [id])
  serviceId       String
  service         Service       @relation(fields: [serviceId], references: [id])
  observations    String
  status          String        @default("pending")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}
